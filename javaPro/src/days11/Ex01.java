package days11;

/**
 * @author yusica
 * @data 2025. 1. 9. - 오전 9:48:12
 * @subject
 * @content
 */
public class Ex01 {

	public static void main(String[] args) {
		/*
		 * 1. 객체 지향 프로그래밍(OOP, Object-Oriented Programming)
		 * 		완성된 조립 컴퓨터 = 부품 + 부품 + 부품 .. .
		 * 		완성된 프로그램 = 객체 + 객체 + 객체 ..
		 * 
		 * 	객체 == Object == 부품 == 개체 == 믈건 : 특징(필드) + 기능(일==메서드)
		 * 
		 * 2. 클래스 : 객체를 만들기 위한 설계도  
		 * 
		 * 3. 객체   : 클래스로 실제 존재하는 값, 사물(유형) 또는 개념(무형)
		 * 						Car myCar;
		 * 
		 * 4. 인스턴스  :   생성된 객체를 인스턴스라 한다
		 * 		인스턴스화 : 공장에서 설계도면을 보면서 응접, 절단, 조립 -> 물건을 만드는 과정
		 * 									클래스 -> 객체를 생성하는 과정
		 * 						new Car()
		 * 
		 * 5. OOP의 특징 ( == 클래스의 특징 )
		 * 		1) 상속성(Inheritance)
		 * 		2) 캡슐화(Encapsulation)
		 * 			은닉화
		 * 		3) 다형성(Polymorphism)
		 * 		4) 추상화(Abstraction)
		 * 
		 * 6. 객체의 구성요소
		 * 		예) 망치 == 물건 == 객체
		 * 			구성요소 : 속성 + 기능
		 * 
		 * 		1) 객체를 구성하는 요소 = "멤버"
		 * 		2) 특징(속성)	==	property == 멤버변수 == 필드(field)
		 * 			+ 기능(일)	== function == 멤버함수 == 메서드(method)
		 * 
		 * 7. 클래스 설계하는 과정 == 클래스 선언
		 * 		1) 객체의 구성요소 파악				-> 목록작성
		 * 			(특성(필드), 기능(메서드))
		 * 		2) 클래스 선언
		 * 			[접] [기] class 클래스명 [extends super(부모)클래스][implements 인터페이스]{
		 * 				// 클래스 구성요소
		 * 				// (1) 필드
		 * 				// (2) 메서드
		 * 			}
		 * 		3) 객체 생성 - 테스트
		 * 		4) 문제점 파악 - 유지, 보수
		 * 		5) 상용화
		 * 		6) 기능 추가, 확장 - 버전 관리
		 * 
		 * 8. 자동차 클래스 설계
		 * 		1) 객체의 구성요소 파악( 필드, 메서드 목록 작성 )
		 * 		 전기
		 * 		 스포츠카
		 * 		 알루미늄바디
		 * 		 3도어
		 * 		 가로*세로
		 * 		 엔진
		 * 		 등등
		 * 		2) 클래스 선언
		 * 		3) 객체 생성
		 * 			:
		 * 
		 * */

	}

}
